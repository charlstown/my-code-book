{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"My code book","text":""},{"location":"#our-mission","title":"Our mission","text":"<p>Welcome to the ultimate destination for all things! Our website is a veritable treasure trove of amazing content, from cutting-edge technology to mind-blowing science to jaw-dropping pop culture. We've got everything you need to satisfy your thirst for knowledge, adventure, and entertainment. Our modern and sleek design is fully responsive and mobile-friendly, making it easy to access our content from anywhere in the world. And with the latest web technologies and cross-platform support, you can be sure that our site is fast, reliable, and accessible on all your devices. So come on in and explore our world of geeky wonders \u2013 we guarantee you won't be disappointed!</p> <p></p> <p>Discover My code book</p>"},{"location":"#features","title":"Features","text":"<ul> <li> <p> Feature One </p> <p>Description for this feature.</p> <p> Go to the feature</p> </li> <li> <p> Feature Two </p> <p>Description for this feature.</p> <p> Go to the feature</p> </li> <li> <p> Feature Three </p> <p>Description for this feature.</p> <p> Go to the feature</p> </li> </ul>"},{"location":"#popular-links","title":"Popular links","text":"<ul> <li> Getting started in Gluon</li> <li> Create a new team</li> <li> Add new components to your project</li> <li> I can't access Gluon with my user</li> </ul>"},{"location":"about/changelog/","title":"Changelog","text":""},{"location":"about/changelog/#release-contributors","title":"Release contributors","text":"<ul> <li>charlstown</li> </ul>"},{"location":"about/changelog/#version-010-25012023","title":"Version 0.1.0 (25/01/2023)","text":"<p>This is the first documentation release of My code book project.</p> <p>Features</p> <ul> <li>Landing site</li> <li>Getting started section</li> <li>About pages</li> </ul> <p>Minor Changes</p> <ul> <li>None</li> </ul> <p>Bugfixes</p> <ul> <li>None</li> </ul>"},{"location":"about/external-links/","title":"External links","text":""},{"location":"about/external-links/#my-code-book","title":"My code book","text":"<ul> <li>My code book</li> <li>My code book repository</li> </ul>"},{"location":"about/external-links/#other-links","title":"Other links","text":"<ul> <li>Mkdocs main page</li> <li>Mkdocs repository</li> <li>Mkdocs introductory tutorial</li> <li>Material for Mkdocs</li> </ul>"},{"location":"about/license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2024  charlstown</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"javascript/basics/","title":"Basics","text":""},{"location":"javascript/basics/#if-else","title":"If Else","text":""},{"location":"javascript/basics/#ternary-operator","title":"Ternary operator","text":"<pre><code>// If Else\nif (day === 'Wednesday') {\nreturn true;\n} else {\nreturn false;\n}\n\n// Ternary operator\nday === 'Wednesday' ? true : false;\n</code></pre>"},{"location":"javascript/basics/#string-methods","title":"String methods","text":"Method Description <code>.split(' ')</code> Returns array of words <code>.join(' ')</code> Returns a string with spaces"},{"location":"javascript/basics/#javascript-functions","title":"Javascript functions","text":""},{"location":"javascript/basics/#function-expressions","title":"Function expressions","text":"<p>Another way to define a function is to use a function expression. To define a function inside an expression, we can use the function keyword. In a function expression, the function name is usually omitted. A function with no name is called an anonymous function. A function expression is often stored in a variable in order to refer to it.</p> <p></p> <pre><code>const plantNeedsWater = function(day) {\nif (day === 'Wednesday') {\nreturn true;\n} else {\nreturn false;\n}\n};\n\n\nconsole.log(plantNeedsWater('Tuesday'));\n</code></pre>"},{"location":"javascript/basics/#arrow-functions","title":"Arrow functions","text":"<p>ES6 introduced arrow function syntax, a shorter way to write functions by using the special \u201cfat arrow\u201d () =&gt; notation.</p> <p>Arrow functions remove the need to type out the keyword function every time you need to create a function. Instead, you first include the parameters inside the ( ) and then add an arrow =&gt; that points to the function body surrounded in { } like this:</p> <pre><code>const rectangleArea = (width, height) =&gt; {\n  let area = width * height;\n  return area;\n};\n</code></pre>"},{"location":"javascript/basics/#concise-af-syntax","title":"Concise AF syntax","text":"<pre><code>// Zero parameters\nconst functionName = () =&gt; {}; // Brackets only if multiline function\n\n// One parameter\nconst functionName = paramOne =&gt; {};\n\n// Two parameters\nconst functionName = (paramOne, paramTwo) =&gt; {};\n</code></pre>"},{"location":"javascript/basics/#arrays","title":"Arrays","text":"METHOD CODE DESCRIPTION push <code>varArray.push('item1', 'item2');</code> Appends elements to an array pop <code>varArray.pop();</code> Deletes last item of the list shift <code>varArray.shift();</code> Deletes first item of the list unshift <code>varArray.shift();</code> Adds an element first of the list slice <code>varArray.slice(1, 3);</code> Slice a list of elements by index indexOf <code>varArray.indexOf('item5);</code> Returns the index of the element provided"},{"location":"javascript/basics/#iterators","title":"Iterators","text":""},{"location":"javascript/basics/#the-foreach-method","title":"The <code>.forEach()</code> Method`","text":"<p>The first iteration method that we\u2019re going to learn is .forEach(). Aptly named, .forEach() will execute the same code for each element of an array.</p> <pre><code>const groceries = ['mango', 'papaya', 'pineapple', 'apple'];\n\nfruits.forEach(function announcement(item){\nconsole.log(`I want to eat a ${item}`);\n});\n</code></pre> <p>Another way to pass a callback for .forEach() is to use arrow function syntax.</p> <pre><code>groceries.forEach(groceryItem =&gt; console.log(groceryItem));\n</code></pre> <p>We can also define a function beforehand to be used as the callback function.</p> <pre><code>function printGrocery(element){\nconsole.log(element);\n}\n\ngroceries.forEach(printGrocery);\n</code></pre>"},{"location":"javascript/basics/#the-map-method","title":"The <code>.map()</code> Method","text":"<p>The second iterator we\u2019re going to cover is .map(). When .map() is called on an array, it takes an argument of a callback function and returns a new array! Take a look at an example of calling .map():`</p> <pre><code>const numbers = [1, 2, 3, 4, 5]; const bigNumbers = numbers.map(number =&gt; {\nreturn number * 10;\n});\n</code></pre> <p><code>.map()</code> works in a similar manner to .forEach()\u2014 the major difference is that .map() returns a new array.`</p>"},{"location":"javascript/basics/#the-filter-method","title":"The <code>.filter()</code> Method","text":"<p>Another useful iterator method is .filter(). Like .map(), .filter() returns a new array. However, .filter() returns an array of elements after filtering out certain elements from the original array. The callback function for the .filter() method should return true or false depending on the element that is passed to it.</p> <pre><code>const words = ['chair', 'music', 'pillow', 'brick', 'pen', 'door']; const shortWords = words.filter(word =&gt; {\nreturn word.length &lt; 6;\n});\n</code></pre>"},{"location":"javascript/basics/#the-findindex-method","title":"The <code>.findIndex()</code> Method","text":"<p>We sometimes want to find the location of an element in an array. That\u2019s where the .findIndex() method comes in! Calling .findIndex() on an array will return the index of the first element that evaluates to true in the callback function.</p> <pre><code>const jumbledNums = [123, 25, 78, 5, 9]; const lessThanTen = jumbledNums.findIndex(num =&gt; {\nreturn num &lt; 10;\n});\n</code></pre>"},{"location":"javascript/basics/#the-reduce-method","title":"The <code>.reduce()</code> Method","text":"<p>Another widely used iteration method is .reduce(). The .reduce() method returns a single value after iterating through the elements of an array, thereby reducing the array. Take a look at the example below:</p> <pre><code>const numbers = [1, 2, 4, 10];\n\nconst summedNums = numbers.reduce((accumulator, currentValue) =&gt; {\nreturn accumulator + currentValue\n}, 0)\n\nconsole.log(summedNums) // Output: 17\n</code></pre> <p>The .reduce() method can also take an optional second parameter to set an initial value for accumulator (remember, the first argument is the callback function!).</p>"},{"location":"javascript/basics/#the-some-method","title":"The <code>.some()</code> Method","text":"<p>The <code>.some()</code> method checks if at least one element in the array passes the test implemented by the provided function. It returns a Boolean value - true if at least one element satisfies the condition, and false otherwise. This method is useful for scenarios where you need to determine the presence of any element that meets certain criteria.</p> <pre><code>const words = ['unique', 'uncanny', 'pique', 'oxymoron', 'guise'];\n\nconsole.log(words.some(word =&gt; {\nreturn word.length &lt; 6;\n}));\n</code></pre>"},{"location":"javascript/basics/#the-every-method","title":"The <code>.every()</code> Method","text":"<p>The <code>.every()</code> method checks if all elements in an array pass the test implemented by the provided function. It returns a Boolean value - true if all elements satisfy the condition, and false otherwise. This method is useful when you need to ensure that all elements in an array meet certain criteria.</p> <pre><code>const words = ['unique', 'uncanny', 'oxymoron'];\n\nconsole.log(interestingWords.every((word) =&gt; {\nreturn word.length &gt; 5;\n} ));\n</code></pre>"},{"location":"javascript/objects/","title":"Objects in JS","text":""},{"location":"javascript/objects/#passing-objects-in-functions","title":"Passing objects in functions","text":"<p>This means when we pass a variable assigned to an object into a function as an argument, the computer interprets the parameter name as pointing to the space in memory holding that object. As a result, functions which change object properties actually mutate the object permanently (even when the object is assigned to a const variable).</p> <pre><code>const spaceship = {\nhomePlanet : 'Earth',\ncolor : 'silver'\n};\n\nlet paintIt = obj =&gt; {\nobj.color = 'glorious gold'\n};\n\npaintIt(spaceship);\n\nspaceship.color // Returns 'glorious gold'\n</code></pre>"},{"location":"terraform/","title":"Terraform contents","text":""}]}